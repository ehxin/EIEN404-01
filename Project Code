/*************************************************** 

  This is an example for the Adafruit CC3000 Wifi Breakout & Shield



  Designed specifically to work with the Adafruit WiFi products:

  ----> https://www.adafruit.com/products/1469



  Adafruit invests time and resources providing this open source code, 

  please support Adafruit and open-source hardware by purchasing 

  products from Adafruit!



  Written by Limor Fried & Kevin Townsend for Adafruit Industries.  

  BSD license, all text above must be included in any redistribution

 ****************************************************/

 

 /*

This example does a test of the TCP client capability:

  * Initialization

  * Optional: SSID scan

  * AP connection

  * DHCP printout

  * DNS lookup

  * Optional: Ping

  * Connect to website and print out webpage contents

  * Disconnect

SmartConfig is still beta and kind of works but is not fully vetted!

It might not work on all networks!

*/

#include <Adafruit_CC3000.h>

#include <ccspi.h>

#include <SPI.h>

#include <string.h>

#include "utility/debug.h"




// These are the interrupt and control pins

#define ADAFRUIT_CC3000_IRQ   3  // MUST be an interrupt pin!

// These can be any two pins

#define ADAFRUIT_CC3000_VBAT  5

#define ADAFRUIT_CC3000_CS    10

// Use hardware SPI for the remaining pins

// On an UNO, SCK = 13, MISO = 12, and MOSI = 11

Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,

                                         SPI_CLOCK_DIVIDER); // you can change this clock speed



#define WLAN_SSID       "Xin"           // cannot be longer than 32 characters!

#define WLAN_PASS       "fkdltpst9"

// Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2

#define WLAN_SECURITY   WLAN_SEC_WPA2



#define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data 

                                   // received before closing the connection.  If you know the server

                                   // you're accessing is quick to respond, you can reduce this value.



// What page to grab!

#define WEBSITE      "api.thingspeak.com"



// ThingTweet configurations

String thingtweetAPIKey = "WMD12U27BTY16FV5";




// PIR motion sensor


int PirPin = 7;      // PIR sensor's out signal

int SpeakerPin = 8;

int Button = 6;

int PirState = LOW;  // assuming no motion detected

int MotionCount = 0;

unsigned long LastSendingTime = 0;

#define SENDING_INTERVAL 60000



/**************************************************************************

    @brief  Sets up the HW and the CC3000 module (called automatically on startup)

**************************************************************************/

uint32_t ip;



void setup(void) {

  pinMode(PirPin, INPUT);     // declare sensor as input

  pinMode(SpeakerPin, OUTPUT);
  
  pinMode(Button, INPUT);

  Serial.begin(115200);

  Serial.println(F("Hello, CC3000!\n")); 



  Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);

  

  /* Initialise the module */

  Serial.println(F("\nInitializing..."));

  if (!cc3000.begin()) {

    Serial.println(F("Couldn't begin()! Check your wiring?"));

    while(1);

  }

  

  // Optional SSID scan

  // listSSIDResults();

  

  Serial.print(F("\nAttempting to connect to ")); Serial.println(WLAN_SSID);

  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {

    Serial.println(F("Failed!"));

    while(1);

  }

  Serial.println(F("Connected!"));

  

  /* Wait for DHCP to complete */

  Serial.println(F("Request DHCP"));

  while (!cc3000.checkDHCP()) {

    delay(3000); // ToDo: Insert a DHCP timeout!

  }  



  /* Display the IP address DNS, Gateway, etc. */  

  while (! displayConnectionDetails()) {

    delay(1000);

  }



  ip = 0;

  // Try looking up the website's IP address

  Serial.print(WEBSITE); Serial.print(F(" -> "));
  Serial.print(F(""));

  while (ip == 0) {

    if (! cc3000.getHostByName(WEBSITE, &ip)) {

      Serial.println(F("Couldn't resolve!"));

    }

    delay(1500);

  }

  cc3000.printIPdotsRev(ip);

  

  // Optional: Do a ping test on the website

  /*

  Serial.print(F("\n\rPinging ")); cc3000.printIPdotsRev(ip); Serial.print("...");  

  replies = cc3000.ping(ip, 5);

  Serial.print(replies); Serial.println(F(" replies"));

  */  

}





void loop(void) {

  int val = digitalRead(PirPin);  // check motion

  if(val == HIGH) {              // check if the input is HIGH

    if(PirState == LOW) {

      Serial.print("Motion detected = ");

      Serial.println(MotionCount);
      
      analogWrite (SpeakerPin, 255);
      
      delay (5000);
      
      analogWrite (SpeakerPin, 0);
      
      delay (10);

      PirState = HIGH;    // remember state

      MotionCount++;

    }

  } else {

    if(PirState == HIGH) {

      Serial.println("Motion ended!");
      
      noTone(SpeakerPin);

      PirState = LOW;

    }

  }

  

  if(MotionCount > 0 && millis() - LastSendingTime > SENDING_INTERVAL) {

    updateTwitterStatus("My Girlfriend is facing danger!!");

    MotionCount = 0;

    LastSendingTime = millis();


  }
  
  int val2 = digitalRead(Button);
  
  if (val2 == HIGH) {
      analogWrite (SpeakerPin, 255);
      
      delay (50000);
      
      analogWrite (SpeakerPin, 0);
      
      delay (10);
      
      updateTwitterStatus("Please Call the Police!!");
  }
}




/**************************************************************************

    @brief  Send request to ThingTweet

**************************************************************************/

void updateTwitterStatus(String tsData) {

  /* Try connecting to the website.

     Note: HTTP/1.1 protocol is used to keep the server from closing the connection before all data is read.

  */

  Adafruit_CC3000_Client www = cc3000.connectTCP(ip, 80);

  if (www.connected()) {

    // make query string, 140 chars max!

    tsData = "api_key="+thingtweetAPIKey+"&status="+tsData;

    char tempChar[156];

    for(int i=0; i<156; i++)

      tempChar[i] = 0x00;

    tsData.toCharArray(tempChar, 155);

    

    www.fastrprint(F("POST /apps/thingtweet/1/statuses/update HTTP/1.1\r\n"));

    www.fastrprint(F("Host: api.thingspeak.com\r\n"));

    www.fastrprint(F("Connection: close\r\n"));

    www.fastrprint(F("Content-Type: application/x-www-form-urlencoded\r\n"));

    www.fastrprint(F("Content-Length: "));

    www.fastrprint(int2str(tsData.length()));

    www.fastrprint(F("\r\n\r\n"));

    www.fastrprint(tempChar);

    www.println();

  } else {

    Serial.println(F("Connection failed"));    

    return;

  }


  Serial.println(F("-------------------------------------"));

  /* Read data until either the connection is closed, or the idle timeout is reached. */ 

  unsigned long lastRead = millis();

  while (www.connected() && (millis() - lastRead < IDLE_TIMEOUT_MS)) {

    while (www.available()) {

      char c = www.read();

      Serial.print(c);

      lastRead = millis();

    }

  }

  www.close();

  Serial.println(F("-------------------------------------"));

}


/**************************************************************************

    @brief  Begins an SSID scan and prints out all the visible networks

**************************************************************************/

void listSSIDResults(void)

{

  uint32_t index;

  uint8_t valid, rssi, sec;

  char ssidname[33]; 



  if (!cc3000.startSSIDscan(&index)) {

    Serial.println(F("SSID scan failed!"));

    return;

  }



  Serial.print(F("Networks found: ")); Serial.println(index);

  Serial.println(F("================================================"));



  while (index) {

    index--;



    valid = cc3000.getNextSSID(&rssi, &sec, ssidname);

    

    Serial.print(F("SSID Name    : ")); Serial.print(ssidname);

    Serial.println();

    Serial.print(F("RSSI         : "));

    Serial.println(rssi);

    Serial.print(F("Security Mode: "));

    Serial.println(sec);

    Serial.println();

  }

  Serial.println(F("================================================"));



  cc3000.stopSSIDscan();

}



/**************************************************************************

    @brief  Tries to read the IP address and other connection details

**************************************************************************/

bool displayConnectionDetails(void)

{

  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;

  

  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv))

  {

    Serial.println(F("Unable to retrieve the IP Address!\r\n"));

    return false;

  }

  else

  {

    Serial.print(F("\nIP Addr: ")); cc3000.printIPdotsRev(ipAddress);

    Serial.print(F("\nNetmask: ")); cc3000.printIPdotsRev(netmask);

    Serial.print(F("\nGateway: ")); cc3000.printIPdotsRev(gateway);

    Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);

    Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);

    Serial.println();

    return true;

  }

}



/**************************************************************************

    Utilities

**************************************************************************/

char _int2str[7];

char* int2str( register int i ) {

  register unsigned char L = 1;

  register char c;

  register boolean m = false;

  register char b;  // lower-byte of i

  // negative

  if ( i < 0 ) {

    _int2str[ 0 ] = '-';

    i = -i;

  }

  else L = 0;

  // ten-thousands

  if( i > 9999 ) {

    c = i < 20000 ? 1

      : i < 30000 ? 2

      : 3;

    _int2str[ L++ ] = c + 48;

    i -= c * 10000;

    m = true;

  }

  // thousands

  if( i > 999 ) {

    c = i < 5000

      ? ( i < 3000

          ? ( i < 2000 ? 1 : 2 )

          :   i < 4000 ? 3 : 4

        )

      : i < 8000

        ? ( i < 6000

            ? 5

            : i < 7000 ? 6 : 7

          )

        : i < 9000 ? 8 : 9;

    _int2str[ L++ ] = c + 48;

    i -= c * 1000;

    m = true;

  }

  else if( m ) _int2str[ L++ ] = '0';

  // hundreds

  if( i > 99 ) {

    c = i < 500

      ? ( i < 300

          ? ( i < 200 ? 1 : 2 )

          :   i < 400 ? 3 : 4

        )

      : i < 800

        ? ( i < 600

            ? 5

            : i < 700 ? 6 : 7

          )

        : i < 900 ? 8 : 9;

    _int2str[ L++ ] = c + 48;

    i -= c * 100;

    m = true;

  }

  else if( m ) _int2str[ L++ ] = '0';

  // decades (check on lower byte to optimize code)

  b = char( i );

  if( b > 9 ) {

    c = b < 50

      ? ( b < 30

          ? ( b < 20 ? 1 : 2 )

          :   b < 40 ? 3 : 4

        )

      : b < 80

        ? ( i < 60

            ? 5

            : i < 70 ? 6 : 7

          )

        : i < 90 ? 8 : 9;

    _int2str[ L++ ] = c + 48;

    b -= c * 10;

    m = true;

  }

  else if( m ) _int2str[ L++ ] = '0';

  // last digit

  _int2str[ L++ ] = b + 48;

  // null terminator

  _int2str[ L ] = 0;  

  return _int2str;

}
